{"version":3,"sources":["components/Header.tsx","assets/static/icon/github.svg","assets/static/icon/twitter.svg","assets/static/icon/youtube.svg","components/Footer.tsx","components/PostPreview.tsx","components/Home.tsx","components/AllPosts.tsx","components/About.tsx","components/Contact.tsx","components/posts/PostContent.tsx","containers/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","Fragment","Navbar","id","collapseOnSelect","expand","Container","className","to","Toggle","Collapse","Nav","Footer","href","src","githubicon","alt","twittericon","youtubeicon","PostItem","cover","title","content","date","Home","Helmet","AllPosts","style","marginBottom","About","Contact","PostContent","language","themecolor","showLineNumbers","wrapLines","rel","target","text","theme","startingLineNumber","App","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.addff184.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Nav, Navbar } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// styles\r\nimport '../assets/styles/components/Header.scss';\r\n\r\nconst Header: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Navbar id=\"mainNav\" collapseOnSelect expand=\"lg\">\r\n                <Container>\r\n                    <Link className=\"navbar-brand\" to=\"/\">A.D.Leonel</Link>\r\n                    <Navbar.Toggle className=\"navbar-toggler\" aria-controls=\"responsive-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <Nav className=\"me-auto\" />\r\n                        <Nav>\r\n                            <Link className=\"nav-link\" to=\"/\">Home</Link>\r\n                            <Link className=\"nav-link\" to=\"/posts\">Posts</Link>\r\n                            {/* <Link className=\"nav-link\" to=\"/about\">About</Link> */}\r\n                            {/* <Link className=\"nav-link\" to=\"/contact\">Contact</Link> */}\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default Header;","export default __webpack_public_path__ + \"static/media/github.e2f07326.svg\";","export default __webpack_public_path__ + \"static/media/twitter.87682341.svg\";","export default __webpack_public_path__ + \"static/media/youtube.c8f52198.svg\";","import React from 'react';\r\n\r\n// styles\r\nimport '../assets/styles/components/Footer.scss';\r\n\r\nimport githubicon from '../assets/static/icon/github.svg';\r\nimport twittericon from '../assets/static/icon/twitter.svg';\r\nimport youtubeicon from '../assets/static/icon/youtube.svg';\r\n\r\nconst Footer: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <footer className=\"footer-container\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-8 col-md-10 mx-auto\">\r\n                            <ul className=\"list-inline text-center\">\r\n                                <li className=\"list-inline-item\">\r\n                                    <a className=\"footer-link\" href=\"https://github.com/addleonel\">\r\n                                        <img className=\"footer-icon\" src={githubicon} alt=\"github\" />\r\n                                    </a>\r\n                                </li>\r\n                                <li className=\"list-inline-item\">\r\n                                    <a className=\"footer-link\" href=\"https://twitter.com/addleonel\">\r\n                                        <img className=\"footer-icon\" src={twittericon} alt=\"twitter\" />\r\n                                    </a>\r\n                                </li>\r\n                                <li className=\"list-inline-item\">\r\n                                    <a className=\"footer-link\" href=\"https://www.youtube.com/channel/UCG8LbrI4Ugs0zAIEiGHTTeA\">\r\n                                        <img className=\"footer-icon\" src={youtubeicon} alt=\"youtube\" />\r\n                                    </a>\r\n                                </li>\r\n                            </ul>\r\n                            <p className=\"text-center\">Copyright & copy 2021</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport '../assets/styles/components/PostPreview.scss';\r\n\r\ninterface props {\r\n    cover?: string;\r\n    title: string;\r\n    content: string;\r\n    date: string;\r\n}\r\n\r\nconst PostItem: React.FC<props> = ({cover, title, content, date}) => {\r\n    return (\r\n        <section className=\"post-preview\">\r\n            <Link className=\"post-link\" to=\"/posts/full-text-search-django-postgress\">\r\n                {cover && <img className=\"post-cover\" src={cover} alt=\"cover\" />}\r\n                <h3 className=\"post-title\">\r\n                    {title}\r\n                </h3>\r\n                <p className=\"post-subtitle\">\r\n                    {content}\r\n                </p>\r\n            </Link>\r\n            <p className=\"post-meta\">\r\n                {date}\r\n            </p>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default PostItem;","import React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport PostPreview from './PostPreview';\r\n// styles\r\n\r\nimport '../assets/styles/components/Home.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home: React.FC = () => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet>\r\n                <title>A.D.Leonel's website</title> \r\n            </Helmet>\r\n            <header className=\"masthead\">\r\n                <div className=\"overlay\"></div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-8 col-md-10 mx-auto\">\r\n                            <div className=\"site-heading\">\r\n                                <blockquote className=\"blockquote\">\r\n                                    <q>It had long since come to my attention that people of accomplishment rarely sat back and let things happen to them. They went out and happened to things.</q>\r\n                                    <footer>\r\n                                        <cite>- Leonardo Davinci</cite>\r\n                                    </footer>\r\n                                </blockquote>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n            <main className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-8 col-md-10 mx-auto\">\r\n                        <p className=\"last-posts\">Last Publications</p>\r\n                        <PostPreview\r\n                            cover=\"https://images.pexels.com/photos/546819/pexels-photo-546819.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\" \r\n                            title=\"Full-Text Search | Django | Postgres\"\r\n                            content=\"Full-text search refers to techniques for searching a single computer-stored document or a collection in a full-text database ...\"\r\n                            date=\"Published On June 5, 2021\"\r\n                        />\r\n                    </div>\t\r\n                </div>\r\n            </main>\r\n            <section className=\"container more-post\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-8 col-md-10 mx-auto\">\r\n                        <Link className=\"more-post__link\" to=\"/posts\">All posts</Link>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\n// components\r\nimport PostPreview from './PostPreview';\r\n\r\nconst AllPosts: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet>\r\n                <title>All publications</title> \r\n            </Helmet>\r\n            <main className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-8 col-md-10 mx-auto\">\r\n                        <h2 style={{marginBottom: \"30px\"}}>All publications</h2>\r\n                        <PostPreview \r\n                            title=\"Full-Text Search | Django | Postgres\"\r\n                            content=\"Full-text search refers to techniques for searching a single computer-stored document or a collection in a full-text database ...\"\r\n                            date=\"Published On June 5, 2021\"\r\n                        />\r\n                    </div>\t\r\n                </div>\r\n            </main>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default AllPosts;","import React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nconst About: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet>\r\n                <title>About me</title> \r\n            </Helmet>\r\n            <main className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-8 col-md-10 mx-auto\">\r\n                        \r\n                        <h2 style={{marginBottom: \"30px\"}}>About me</h2>\r\n                        <p>\r\n                            I am a software developer with a passion for web development. I have a strong background in\r\n                            web development and have worked with many different languages and frameworks. I am currently\r\n                            working on a project that is a web application for a local business.\r\n                        </p>\r\n                    </div>\t\r\n                </div>\r\n            </main>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About;","import * as React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nconst Contact: React.FC = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Helmet>\r\n        <title>Contact me</title> \r\n      </Helmet>\r\n      <main className=\"container\">\r\n          <div className=\"row\">\r\n              <div className=\"col-lg-8 col-md-10 mx-auto\">\r\n                  <h2 style={{marginBottom: \"30px\"}}>Contact me</h2>\r\n                  \r\n              </div>\t\r\n          </div>\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Contact;","import React from 'react';\r\nimport { CodeBlock } from 'react-code-blocks';\r\nimport { Helmet } from 'react-helmet';\r\n// styles\r\nimport '../../assets/styles/components/PostContent.scss';\r\n\r\nconst PostContent: React.FC = () => {\r\n    const language: string = 'python';\r\n    const themecolor: string = 'tomorrowNightBright'\r\n    const showLineNumbers = false;\r\n    const startingLineNumber: number = 1;\r\n    const wrapLines: Boolean= true;\r\n    return (\r\n        <React.Fragment>\r\n        <Helmet>\r\n            <title>Full-Text Search | Django | Postgres</title>\r\n        </Helmet>\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-8 col-md-10 mx-auto\">\r\n                    <div className=\"site-heading\">\r\n                        <img className=\"post-image\" src=\"https://images.pexels.com/photos/546819/pexels-photo-546819.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\" alt=\"\" />\r\n                        <h2> \r\n                            Full-Text Search | Django | Postgres\r\n                        </h2>\r\n                        <p className=\"post-meta-inside\">\r\n                            Posted On June 5, 2021\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <main className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-8 mx-auto\">\r\n                    <section className=\"post-content\">\r\n                        <h3>What is Full-Text Search?</h3>\r\n                        <p> <a className=\"link-text mark-text\" rel=\"noreferrer\" target=\"_blank\" href=\"http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.help.sqlanywhere.12.0.1/dbusage/full-text-search-what-is-it.html\">\r\n                            Full-text search</a> \r\n                            refers to techniques for searching a single computer-stored document or a collection in a full-text database. Full-text search is distinguished from searches based on metadata or on parts of the original texts represented in databases (such as titles, abstracts, selected sections, or bibliographical references).\r\n                        </p>\r\n                        <h3>PostgresSQL Support</h3>\r\n                        <p>PostgreSQL has its own full-text search implementation built-in. While not as powerful as some other search engines, it has the advantage of being inside your database and so can easily be combined with other relational queries such as categorization.\r\n                        </p>\r\n                        <p>The database functions in the django.contrib.postgres.search module ease the use of PostgreSQL’s full text search engines.\r\n                        </p>\r\n                        <p>For use this tools is most easily to setup an example with a simple app into Django\r\n                        </p>\r\n                        <p>Read more about <a className=\"link-text mark-text\" rel=\"noreferrer\" target=\"_blank\" href=\"https://docs.djangoproject.com/en/3.2/ref/contrib/postgres/\">postgresSQL support</a></p>\r\n                        <h3>Create a Model</h3>\r\n                        <figure>\r\n                        <pre>\r\n                            <code>\r\n                        <CodeBlock\r\n                            text={`\r\nfrom django.db import models\r\n\r\nclass Entity(models.Model):\r\n\r\n    name = models.CharField(max_length=150)\r\n    email = models.EmailField(max_length=300)\r\n    city = models.CharField(max_length=300)\r\n    country = models.CharField(max_length=300)\r\n    url = models.URLField(max_length=400, blank=True)\r\n    apply = models.BooleanField(default=False)\r\n    description = models.TextField(blank=False)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n                            `}\r\n                            language={language}\r\n                            showLineNumbers={showLineNumbers}\r\n                            theme={themecolor}\r\n                            startingLineNumber={startingLineNumber}\r\n                            wrapLines={wrapLines}\r\n                        />\r\n                        </code>\r\n                        </pre>\r\n                        </figure>\r\n                        <h3>Create view function-based (in this case)</h3>\r\n                        <p>Inside to views.py</p>\r\n                        <pre><code>\r\n                        <CodeBlock\r\n                            text={`\r\ndef search(request):\r\n    pass\r\n                            `}\r\n                            language={language}\r\n                            showLineNumbers={showLineNumbers}\r\n                            theme={themecolor}\r\n                            startingLineNumber={startingLineNumber}\r\n                            wrapLines={wrapLines}\r\n                        />\r\n                        </code>\r\n                        </pre>\r\n                        <p>For now, this is basically the begin</p>\r\n                        <h3>View’s URL</h3>\r\n                        <p>Inside to urls.py</p>\r\n                        <pre>\r\n                            <code>\r\n                            <CodeBlock\r\n                                text={`\r\n# django \r\nfrom django.urls import path\r\n# project \r\nfrom .views import search\r\n\r\nurlpatterns = [\r\n    path('search', search, name='search'),\r\n]`}\r\n                                language={language}\r\n                                showLineNumbers={showLineNumbers}\r\n                                theme={themecolor}\r\n                                startingLineNumber={startingLineNumber}\r\n                                wrapLines={wrapLines}\r\n                            />\r\n                            </code>\r\n                        </pre>\r\n                        <h3>Create View Template</h3>\r\n                        <p>Into search.html file</p>\r\n                        \r\n                        <pre>\r\n                        <code>\r\n                            <CodeBlock\r\n                                text={`\r\n{# This will be explain after #}\r\n{{ count_filters }}\r\n{% for entity in entities_filtered %}\r\n<p>{{ entity.name }}</p>\r\n<p>{{ entity.email }}</p>\r\n<p>{{ entity.city }}</p>\r\n<p>{{ entity.country }}</p>\r\n<p>{{ entity.url }}</p>\r\n<p>{{ entity.apply }}</p>\r\n<p>{{ entity.description}}</p>\r\n{% endfor %}`}\r\n                                language={language}\r\n                                showLineNumbers={showLineNumbers}\r\n                                theme={themecolor}\r\n                                startingLineNumber={startingLineNumber}\r\n                                wrapLines={wrapLines}\r\n                            />\r\n                             \r\n                        </code>\r\n                        </pre>\r\n                        <p>Now into search-form.html, we are going to create the form to actions the search view</p>\t\t\t\r\n                        <pre>\r\n                            <code>\r\n                            <CodeBlock\r\n                                text={`\r\n<form action=\"{% url 'search' %}\" method=\"GET\">\r\n    <input name=\"q\" type=\"text\" placeholder=\"Search\">\r\n    <button>Search</button>\r\n</form>`}\r\n                                language={language}\r\n                                showLineNumbers={showLineNumbers}\r\n                                theme={themecolor}\r\n                                startingLineNumber={startingLineNumber}\r\n                                wrapLines={wrapLines}\r\n                            />    \r\n                            </code>\r\n                        </pre>\t\t\t\r\n                        \r\n                        <h3>SearchVector Implementation</h3>\r\n                        <p>How to use:</p>\r\n\r\n                        <pre>\r\n                        <code>\r\n                        <CodeBlock\r\n                                text={`\r\n>>> from django.contrib.postgres.search import SearchVector\r\n>>> Entry.objects.annotate(\r\n...     search=SearchVector('body_text', 'blog__tagline'),\r\n... ).filter(search='Cheese')\r\n[<Entry: Cheese on Toast recipes>, <Entry: Pizza Recipes>]\r\n                                `}\r\n                                language={language}\r\n                                showLineNumbers={showLineNumbers}\r\n                                theme={themecolor}\r\n                                startingLineNumber={startingLineNumber}\r\n                                wrapLines={wrapLines}\r\n                        /> \r\n                        </code>\r\n                        </pre>\r\n                        <p>For more information about <a className=\"link-text mark-text\" rel=\"noreferrer\" target=\"_blank\" href=\"https://docs.djangoproject.com/en/3.2/ref/contrib/postgres/search/#searchvector\">SearchVector</a>.</p>\r\n                        <p>Now in our view code that we created above.</p>\r\n                        <pre>\r\n                        <code>\r\n                        <CodeBlock\r\n                                text={`\r\nfrom django.contrib.postgree.search import SearchVector\r\n\r\ndef search(request):\r\n    \r\n    # Here we get the value of the search field from the template\r\n    q = request.GET.get('q', '').strip()\r\n\r\n    # Here we are going to type the principal attributes\r\n    # that we want to search in the search field form\r\n    # in this case are: name, city, country, description, \r\n    # and created_at\r\n    entity_vector = SearchVector(\r\n        'name', 'city', 'country', 'description', 'created_at'\r\n    )`}\r\n                                language={language}\r\n                                showLineNumbers={showLineNumbers}\r\n                                theme={themecolor}\r\n                                startingLineNumber={startingLineNumber}\r\n                                wrapLines={wrapLines}\r\n                        /> \r\n                        </code>\r\n                        </pre>\t\r\n                        <h3>SearchQuery Implementation</h3>\r\n                        <p>How to use:</p>\r\n                        <pre>\r\n                            <code>\r\n                            <CodeBlock\r\n                                text={`\r\n>>> from django.contrib.postgres.search import SearchQuery\r\n>>> SearchQuery('red tomato')  # two keywords\r\n>>> SearchQuery('tomato red')  # same results as above\r\n>>> SearchQuery('red tomato', search_type='phrase')  # a phrase\r\n>>> SearchQuery('tomato red', search_type='phrase')  # a different phrase\r\n>>> SearchQuery(\"'tomato' & ('red' | 'green')\", search_type='raw')  # boolean operators\r\n>>> SearchQuery(\"'tomato' ('red' OR 'green')\", search_type='websearch')  # websearch operators\r\n                                `}\r\n                                language={language}\r\n                                showLineNumbers={showLineNumbers}\r\n                                theme={themecolor}\r\n                                startingLineNumber={startingLineNumber}\r\n                                wrapLines={wrapLines}\r\n                            /> \r\n                            </code>\r\n                        </pre>\t\t\t\t\r\n                        <p>For more information about <a className=\"link-text mark-text\" rel=\"noreferrer\" target=\"_blank\" href=\"https://docs.djangoproject.com/en/3.2/ref/contrib/postgres/search/#searchquery\">SearchQuery</a>.</p>\r\n                        <p>Now in our view code that we created above</p>\r\n                        <pre>\r\n                            <code>\r\n                            <CodeBlock\r\n                                text= {`\r\nfrom django.contrib.postgree.search import (SearchVector,\r\n    SearchQuery\r\n) \r\n\r\ndef search(request):\r\n    \r\n    # Here we get the value of the search field from the template\r\n    search_field_query = request.GET.get('q', '').strip()\r\n\r\n    # Here we are going to type the principal attributes\r\n    # that we want to search in the search field form\r\n    # in this case are: name, city, country, description, \r\n    # and created_at\r\n    entity_vector = SearchVector(\r\n        'name', 'city', 'country', 'description', 'created_at'\r\n    )\r\n    \r\n    # Here we just pass the value of the search field query\r\n    entity_query = SearchQuery(search_field_query)\r\n                                    `}\r\n                                language={language}\r\n                                showLineNumbers={showLineNumbers}\r\n                                theme={themecolor}\r\n                                startingLineNumber={startingLineNumber}\r\n                                wrapLines={wrapLines}\r\n                            />\r\n                            </code>\r\n                        </pre>\r\n                        <h3>SearchRank Implementation</h3>\r\n                        <p>How to use:</p>\r\n                        <pre>\r\n                            <code>\r\n                            <CodeBlock\r\n                                text= {`\r\n>>> from django.contrib.postgres.search import SearchQuery, SearchRank, SearchVector\r\n>>> vector = SearchVector('body_text')\r\n>>> query = SearchQuery('cheese')\r\n>>> Entry.objects.annotate(rank=SearchRank(vector, query)).order_by('-rank')\r\n[<Entry: Cheese on Toast recipes>, <Entry: Pizza recipes>]\r\n                                `}\r\n                                language={language}\r\n                                showLineNumbers={showLineNumbers}\r\n                                theme={themecolor}\r\n                                startingLineNumber={startingLineNumber}\r\n                                wrapLines={wrapLines}\r\n                            />\r\n                            </code>\r\n                        </pre>\r\n                        <p>For more information about <a className=\"link-text mark-text\" rel=\"noreferrer\" target=\"_blank\" href=\"https://docs.djangoproject.com/en/3.2/ref/contrib/postgres/search/#searchrank\">SearchRank</a>.</p>\r\n                        <p>Now in our view code that we created above</p>\r\n                        <pre>\r\n                        <code>\r\n                            <CodeBlock\r\n                                text={`\r\nfrom django.shortcuts import render\r\nfrom django.contrib.postgree.search import (SearchVector,\r\nSearchQuery\r\n) \r\nfrom .models import Entity\r\n\r\ndef search(request):\r\n# This is to count how many object there are (it's optional)\r\ncount_filters = 0\r\n\r\n# Here we get the value of the search field from the template\r\nsearch_field_query = request.GET.get('q', '').strip()\r\n\r\n# Here we are going to type the principal attributes\r\n# that we want to search in the search field form\r\n# in this case are: name, city, country, description, \r\n# and created_at\r\nentity_vector = SearchVector(\r\n    'name', 'city', 'country', 'description', 'created_at'\r\n)\r\n\r\n# Here we just pass the value of the search field query\r\nentity_query = SearchQuery(search_field_query)\r\n\r\n# Here we pass the entity_vector and entity_query\r\nentities_filtered = Entity.objects.annotate(\r\n    rank=SearchRank(entity_vector, entity_query)\r\n).order_by('-rank')\r\n\r\n# count filters\r\ncount_filters += entities_filtered.count()\r\n\r\n# Now We are going to create the context dictionary\r\ncontext = {\r\n    'entities_filtered': entities_filtered,\r\n    'count_filters': count_filters,\r\n}\r\n\r\n# Now we are going to complete with our view \r\nreturn render(request, 'search/search.html', context)`}\r\n                                language={language}\r\n                                showLineNumbers={showLineNumbers}\r\n                                theme={themecolor}\r\n                                startingLineNumber={startingLineNumber}\r\n                                wrapLines={wrapLines}\r\n                            />\r\n                            \r\n                        </code>\r\n                        </pre>\r\n                        <h3>Search View Class-Based</h3>\r\n                        <p>The same search view, now with class:</p>\r\n                        <pre>\r\n                            <code>\r\n                                <CodeBlock\r\n                                text={`\r\nfrom django.shortcuts import render\r\nfrom django.views import View\r\nfrom django.contrib.postgree.search import (SearchVector,\r\n    SearchQuery\r\n) \r\nfrom .models import Entity\r\n\r\nclass SearchEntityView(View):\r\n    template_name = 'search/search.html'\r\n    \r\n    def get(self, request, *args, **kwargs):\r\n        count_filters = 0\r\n\r\n        search_field_query = request.GET.get('q', '').strip()\r\n\r\n        entity_vector = SearchVector(\r\n            'name', 'city', 'country', 'description', 'created_at'\r\n        )\r\n\r\n        entity_query = SearchQuery(search_field_query)\r\n    \r\n        entities_filtered = Entity.objects.annotate(\r\n            rank=SearchRank(entity_vector, entity_query)\r\n        ).order_by('-rank')\r\n\r\n        count_filters += entities_filtered.count()\r\n\r\n        context = {\r\n            'entities_filtered': entities_filtered,\r\n            'count_filters': count_filters,\r\n        }\r\n\r\n        return render(request, self.template_name, context)`}\r\n                                language={language}\r\n                                showLineNumbers={showLineNumbers}\r\n                                theme={themecolor}\r\n                                startingLineNumber={startingLineNumber}\r\n                                wrapLines={wrapLines}\r\n                            />\r\n                            </code>\r\n                        </pre>\r\n                        <p>Then change the url.py path:</p>\r\n                        <pre>\r\n                            <code>\r\n                                <CodeBlock\r\n                                text={`\r\n# django \r\nfrom django.urls import path\r\n# project \r\nfrom .views import SearchEntityView\r\n\r\nurlpatterns = [\r\n    path('search', SearchEntityView.as_view(), name='search'),\r\n]`}\r\n                                language={language}\r\n                                showLineNumbers={showLineNumbers}\r\n                                theme={themecolor}\r\n                                startingLineNumber={startingLineNumber}\r\n                                wrapLines={wrapLines}\r\n                            /> \r\n                            </code>\r\n                        </pre>\r\n                        <p>If you want to read yourself from the <a className=\"link-text mark-text\" rel=\"noreferrer\" target=\"_blank\" href=\"https://docs.djangoproject.com/en/3.2/ref/contrib/postgres/search/#full-text-search\">Django docs</a> just do it.</p>\r\n                    </section>\r\n                </div>\r\n            </div>\r\n        </main>\r\n        </React.Fragment>\r\n    );    \r\n}\r\n\r\nexport default PostContent; ","import * as React from 'react';\r\nimport {\r\n    HashRouter as Router,\r\n    Routes,\r\n    Route,\r\n} from 'react-router-dom';\r\n\r\n// Components\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport Home from '../components/Home';\r\nimport AllPosts from '../components/AllPosts';\r\nimport About from '../components/About';\r\nimport Contact from '../components/Contact';\r\nimport PostContent from '../components/posts/PostContent';\r\n\r\n// styles\r\nimport '../assets/styles/App.scss';\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Router>\r\n                <Header />\r\n                <div className=\"wrap\">\r\n                    <div className=\"main\">\r\n                        <Routes>\r\n                            <Route exact path=\"/\" element={<Home/>}/>\r\n                            <Route path=\"/about\" element={<About/>}/>\r\n                            <Route path=\"/Posts\" element={<AllPosts/>}/>\r\n                            <Route path=\"/contact\" element={<Contact/>}/>\r\n                            <Route path=\"/posts/full-text-search-django-postgress\" element={<PostContent/>}/>\r\n                        </Routes>\r\n                    </div>\r\n                </div>\r\n                <div className=\"footer\">\r\n                    <Footer />\r\n                </div>\r\n            </Router>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}